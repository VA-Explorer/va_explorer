#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 12 14:33:57 2021

@author: babraham
"""
from django.db.models import F

from va_explorer.users.models import User
from va_explorer.va_data_management.models import VerbalAutopsy, VaUsername
from va_explorer.va_data_management.utils.location_assignment import fuzzy_match

import pandas as pd
import re
from numpy import nan


# get table with basic info for all users in system. No PII included in result
def get_anonymized_user_info(): 
    # export user data in way that is consistent with user form 
    # get user form fields
    form_fields = get_form_fields(orient="h")
    # figure out which fields are permissions. Assumes that all boolean fields are permissions
    permissions = form_fields.query("type=='BooleanField'").index.tolist()
    user_data = User.objects\
    .select_related('location_restrictions')\
    .select_related('groups')\
    .select_related('user_permissions')\
    .values(
            'uuid',
            'is_active',
            'is_staff',
            role = F('groups__name'),
            locations = F('location_restrictions__name'), 
            permissions = F('user_permissions__codename')         
    )
    user_df = pd.DataFrame.from_records(user_data).rename(columns={'locations': 'location_restrictions'})
    user_perms = (user_df[['uuid', 'permissions']]
        .pivot_table(index='uuid', columns='permissions', values='uuid', aggfunc=lambda x: len(x) > 0)
        .fillna(False)
        .reset_index()
        )
    user_df = user_df.drop(columns="permissions").drop_duplicates().merge(user_perms, how="left")

# update field worker usernames by matching names against all known interviewer names from VAs
def link_fieldworkers_to_vas(emails=None, debug=False, match_threshold=80):
    user_objects = User.objects
    if emails:
        emails = [emails] if type(emails) is str else emails
        user_objects = user_objects.filter(email__in=emails)
    # get list of field worker user names (from Users)
    field_workers = filter(lambda x: x.is_fieldworker() and not x.name.startswith('Demo'), user_objects.all())
    name_to_user = {user.name.lower().replace(' ', '_'): user for user in list(field_workers)}

    # keep a list of va worker name keys for matching below
    va_worker_keys = get_va_worker_names()
    va_worker_names = list(va_worker_keys.keys())

    # convert va names to lowercase and replace underscores with spaces
    # fuzzy-match unique user_worker_names against unique va_worker_names
    user_names = list(name_to_user.keys())
    matches = [(user_name, fuzzy_match(user_name.lower(), va_worker_names, threshold=match_threshold)) for user_name in user_names]
    # filter out tags that don't match any user names
    matches = list(filter(lambda x: x[1], matches))
    updated_va_ct = 0
    if len(matches) > 0:
        # update usernames of matching users
        name_dict = {user_name: va_user_name for user_name, va_user_name in matches}
        for name, new_username in name_dict.items():
            # update Username
            user = name_to_user[name]
            user.username = new_username
            user.set_va_username(new_username)
            user.save()

            if debug:
                print(f"updating user {name}'s username to {new_username}")

            # Make sure all VAs with matching field worker name (Id10010) are tagged with new username
            # get original field worker tag for query (before it was lower-cased)
            va_worker_key = va_worker_keys[new_username]
            worker_vas = VerbalAutopsy.objects.filter(Id10010=va_worker_key)
            assign_va_usernames(worker_vas, [new_username], override=True)

            # for va in worker_vas:
            #     if debug:
            #         print(f"updating VA {va.id}'s username to {new_username}")
            #     va.username = new_username
            #     va.save()
            #     updated_va_ct +=1

        print(f"DONE. Updated {len(matches)} Field Worker Usernames and tagged {updated_va_ct} VAs")
        return matches
    else:
        print(f"failed to find any field worker tags that matched User names.")
        return None

# try to assign FieldWorker Usernames to a list of VAs if their field worker can be found in system. 
# if no va list provided, will run on all vas in system. 
def assign_va_usernames(vas=None, usernames=None, match_threshold=80, debug=False, override=False):
    success_count = 0
    # if no usernames provided, match against all vausernames in system
    if not usernames:
        usernames = list(VaUsername.objects.values_list('va_username', flat=True))
    else:
        # if one username provided (as string), wrap in a list
        if type(usernames) is str:
            usernames = [usernames]
        # only keep provided usernames if they match a VAUsername in system
        usernames = list(VaUsername.objects.filter(va_username__in=usernames).values_list('va_username', flat=True))

    #username_map = {name: name_id for name, name_id in list(VaUsername.objects.values_list('va_username', 'id'))}
    #usernames = list(username_map.keys())
    if len(usernames) > 0:
        for va in vas:
            # if one username provided and override is true, skip matching and override VA's username. Otherwise,
            # only set va username if field worker field matches a username in usernames. 
            if len(usernames) == 1 and override:
                match = usernames[0]
            elif not pd.isnull(va.Id10010):
                field_worker = va.Id10010
                match = fuzzy_match(field_worker.lower(), usernames, threshold=match_threshold)
            if match:
                if debug:
                    print(f"Tagging va {va.id} with field worker {match}")
                va.username = match
                va.save()
                success_count +=1

        print(f"Successfully tagged {success_count} VAs")
    else:
        print(f"WARNING: no known field workers in system - failed to tag any VAs")

# get list of unique VA field worker names from VA records.
# return format: dictionary mapping lowercase names to raw names as they appear in VA 
def get_va_worker_names(vas=None):
    if not vas:
        vas = VerbalAutopsy.objects
    # unique va field worker names (from field Id10010)
    va_worker_set = set(VerbalAutopsy.objects.filter(Id10010__isnull=False).values_list('Id10010', flat=True))
    # remove 'nan' and 'other' from the list
    va_worker_dict = {n.lower(): n for n in va_worker_set if n not in {'nan', 'other'}}
    return va_worker_dict


# utility method to standardize a full name to lower-case first and last name separated by _
def normalize_name(name):
    final_name = None
    if name not in [None, "", nan]:
        names = name.strip().lower().replace(' ', '_').split('_')
        if len(names) > 1:
            final_name = '_'.join([names[0], names[-1]])
        else:
            final_name = names[0]
    return final_name


        